// Copyright 2025 Linka Cloud  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-kms-wrapping. DO NOT EDIT.

package pb

import (
	"context"
	"encoding/base64"

	wrapping "github.com/hashicorp/go-kms-wrapping/v2"
	"google.golang.org/protobuf/proto"
)

var (
	_ = wrapping.Wrapper(nil)
	_ = context.Background()
	_ = proto.Message(nil)
	_ = base64.RawStdEncoding
)

// Wrap wraps the sensitive struct fields with the provided wrapper.
func (x *Sensitive) Wrap(ctx context.Context, w wrapping.Wrapper, opts ...wrapping.Option) error {
	type Wrapper interface {
		Wrap(ctx context.Context, w wrapping.Wrapper, opts ...wrapping.Option) error
	}
	{
		if len(x.Value) != 0 {
			info, err := w.Encrypt(ctx, []byte(x.Value), opts...)
			if err != nil {
				return err
			}
			b, err := proto.Marshal(info)
			if err != nil {
				return err
			}
			x.Value = base64.RawStdEncoding.EncodeToString(b)
		}
	}
	return nil
}

// Unwrap unwraps the sensitive struct fields with the provided wrapper.
func (x *Sensitive) Unwrap(ctx context.Context, w wrapping.Wrapper, opts ...wrapping.Option) error {
	type Unwrapper interface {
		Unwrap(ctx context.Context, w wrapping.Wrapper, opts ...wrapping.Option) error
	}
	{
		if len(x.Value) != 0 {
			b, err := base64.RawStdEncoding.DecodeString(x.Value)
			if err != nil {
				return err
			}
			var info wrapping.BlobInfo
			if err := proto.Unmarshal(b, &info); err != nil {
				return err
			}
			b, err = w.Decrypt(ctx, &info, opts...)
			if err != nil {
				return err
			}
			x.Value = string(b)
		}
	}
	return nil
}
